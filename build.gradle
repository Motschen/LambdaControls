plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.9-SNAPSHOT" apply false
    id "me.shedaniel.unified-publishing" version "0.1.+" apply false
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

repositories {
    maven {
        url = "https://api.modrinth.com/maven"
    }
    flatDir {
        dirs("localMaven")
    }
}

subprojects {
    apply plugin: "dev.architectury.loom"
    repositories {
        maven {
            url = "https://api.modrinth.com/maven"
        }
        maven { url 'https://jitpack.io' }
        flatDir {
            dirs("../localMaven")
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        //mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        mappings loom.layered {
            it.mappings("net.fabricmc:yarn:$rootProject.yarn_mappings:v2")
            it.mappings("dev.architectury:yarn-mappings-patch-neoforge:$rootProject.yarn_mappings_patch_neoforge_version")
        }
    }
}


allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        maven { url 'https://aperlambda.github.io/maven' }
    }
    dependencies {
        implementation('org.aperlambda:lambdajcommon:1.8.1') {
            exclude group: 'com.google.code.gson'
            exclude group: 'com.google.guava'
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 21
    }
    ext {
        releaseChangelog = {
            def changes = new StringBuilder()
            changes << "## MidnightControls v$project.version for $project.minecraft_version\n[View the changelog](https://www.github.com/TeamMidnightDust/MidnightControls/commits/)"
            def proc = "git log --max-count=1 --pretty=format:%s".execute()
            proc.in.eachLine { line ->
                def processedLine = line.toString()
                if (!processedLine.contains("New translations") && !processedLine.contains("Merge") && !processedLine.contains("branch")) {
                    changes << "\n- ${processedLine.capitalize()}"
                }
            }
            proc.waitFor()
            return changes.toString()
        }
    }

    java {
        withSourcesJar()
    }
}
